{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Identity lab supporting Azure AD and Active Directory enterprise deployment with SIEM in Azure. Easily build your own Pentest / Red Team / Cyber Range in Azure cloud. PurpleCloud was created as a platform for researching Azure Identity. This repository contains python scripts that function as Terraform code generators for different use cases. Each script creates independent resources that don't depend on the others.","title":"Home"},{"location":"#overview","text":"Identity lab supporting Azure AD and Active Directory enterprise deployment with SIEM in Azure. Easily build your own Pentest / Red Team / Cyber Range in Azure cloud. PurpleCloud was created as a platform for researching Azure Identity. This repository contains python scripts that function as Terraform code generators for different use cases. Each script creates independent resources that don't depend on the others.","title":"Overview"},{"location":"apt/","text":"Running APT Simulation Tools This project includes three security tools to run APT simulations for generating forensic artifacts in an automated way. Here is a quick walkthrough on the three tools that are automatically deployed. To test efficacy of the detection solution, it is recommended to disable Windows Defender real-time protection setting. This will allow the simulation tools to run in an environment that will allow them to fully execute, allowing you to look deeper at the forensic artifacts. 1. Atomic Red Team (ART) The Atomic Red Team scripts are downloaded from the official Github repo [5] and the Invoke-AtomicRedTeam execution framework is automatically downloaded and imported from the following repo [6]. This allows you to more easily run atomic tests and the modules are imported into the powershell session everytime you launch a powershell session. This is controlled from the following powershell environment script: C:\\Users\\RTCAdmin\\Documents\\WindowsPowerShell\\Microsoft.Powershell_profile.ps1 Now that this is out of the way, let's show how to run an atomic test for ART! Remotely Running Atomics from Linux First, there is a python script that you can run to remotely invoke ART from your linux system. It's a simple wrapper to Ansible Playbook and the location of the script is here: PurpleCloud/modules/win10-vm/invoke-art.py Run it like this: python3 invoke-art.py The script looks for all hosts.cfg files in the working directory and runs the atomic tests against all Windows 10 hosts. If you only want to run against one of the hosts, run it with the -h flag. For example: python3 invoke-art.py -h hosts-Win10-Liem.cfg Running it with the -a flag will specify an atomic. python3 invoke-art.py -a T1558.003 The script looks for the atomic tests in windows index file: /modules/win10-vm/art/atomic-red-team/atomics/Indexes/Indexes-CSV/windows-index.csv Manually Running Atomics from the Windows Endpoint RDP into the Windows 10 endpoint. From a powershell session, simply run: PS C:\\ > Invoke-AtomicTest <ATOMIC_TEST> -PathToAtomicsFolder C:\\terraform\\ART\\atomic-red-team-master\\atomics The atomics are in the main project directory path of C:\\terraform\\ART\\atomic-red-team-master\\atomics . Browse through them to find which atomic test you want to run. Example of running T1007: PS C:\\Users\\RTCAdmin> Invoke-AtomicTest T1007 -PathToAtomicsFolder C:\\terraform\\ART\\atomic-red-team-master\\atomics 2. Elastic Detection Rules RTA (Red Team Attacks) scripts In June of 2020, Elastic open sourced their detection rules, including Python attack scripts through the Red Team Automation (RTA) project. The following repo [7] is automatically downloaded and extracted using Terraform and Ansible scripts. To run them, launch a cmd or powershell session and use python to run each test from the following directory: Change into the directory: C:\\terraform\\Elastic_Detections\\detection-rules-main Run each python script test that you wish. Each test is in the RTA directory and you invoke the test by removing the .py (TTPs are referenced as a name by just removing the last .py from the script): PS C:\\terraform\\Elastic_Detections\\detection-rules-main> python -m rta <TTP_NAME> Example of 'smb_connection' ttp: PS C:\\terraform\\Elastic_Detections\\detection-rules-main> python -m rta smb_connection You can browse all TTPs in the 'rta' sub-directory 3. APTSimulator The APTSimulator tool [8] is automatically downloaded. Simply extract the Zip archive and supply the zip password of 'apt'. C:\\terraform\\APTSimulator.zip Invoke a cmd prompt and run the batch file script: C:\\terraform\\ATPSimulator\\APTSimulator\\APTSimulator.bat","title":"Running APT Simulation Tools"},{"location":"apt/#running-apt-simulation-tools","text":"This project includes three security tools to run APT simulations for generating forensic artifacts in an automated way. Here is a quick walkthrough on the three tools that are automatically deployed. To test efficacy of the detection solution, it is recommended to disable Windows Defender real-time protection setting. This will allow the simulation tools to run in an environment that will allow them to fully execute, allowing you to look deeper at the forensic artifacts. 1. Atomic Red Team (ART) The Atomic Red Team scripts are downloaded from the official Github repo [5] and the Invoke-AtomicRedTeam execution framework is automatically downloaded and imported from the following repo [6]. This allows you to more easily run atomic tests and the modules are imported into the powershell session everytime you launch a powershell session. This is controlled from the following powershell environment script: C:\\Users\\RTCAdmin\\Documents\\WindowsPowerShell\\Microsoft.Powershell_profile.ps1 Now that this is out of the way, let's show how to run an atomic test for ART! Remotely Running Atomics from Linux First, there is a python script that you can run to remotely invoke ART from your linux system. It's a simple wrapper to Ansible Playbook and the location of the script is here: PurpleCloud/modules/win10-vm/invoke-art.py Run it like this: python3 invoke-art.py The script looks for all hosts.cfg files in the working directory and runs the atomic tests against all Windows 10 hosts. If you only want to run against one of the hosts, run it with the -h flag. For example: python3 invoke-art.py -h hosts-Win10-Liem.cfg Running it with the -a flag will specify an atomic. python3 invoke-art.py -a T1558.003 The script looks for the atomic tests in windows index file: /modules/win10-vm/art/atomic-red-team/atomics/Indexes/Indexes-CSV/windows-index.csv Manually Running Atomics from the Windows Endpoint RDP into the Windows 10 endpoint. From a powershell session, simply run: PS C:\\ > Invoke-AtomicTest <ATOMIC_TEST> -PathToAtomicsFolder C:\\terraform\\ART\\atomic-red-team-master\\atomics The atomics are in the main project directory path of C:\\terraform\\ART\\atomic-red-team-master\\atomics . Browse through them to find which atomic test you want to run. Example of running T1007: PS C:\\Users\\RTCAdmin> Invoke-AtomicTest T1007 -PathToAtomicsFolder C:\\terraform\\ART\\atomic-red-team-master\\atomics 2. Elastic Detection Rules RTA (Red Team Attacks) scripts In June of 2020, Elastic open sourced their detection rules, including Python attack scripts through the Red Team Automation (RTA) project. The following repo [7] is automatically downloaded and extracted using Terraform and Ansible scripts. To run them, launch a cmd or powershell session and use python to run each test from the following directory: Change into the directory: C:\\terraform\\Elastic_Detections\\detection-rules-main Run each python script test that you wish. Each test is in the RTA directory and you invoke the test by removing the .py (TTPs are referenced as a name by just removing the last .py from the script): PS C:\\terraform\\Elastic_Detections\\detection-rules-main> python -m rta <TTP_NAME> Example of 'smb_connection' ttp: PS C:\\terraform\\Elastic_Detections\\detection-rules-main> python -m rta smb_connection You can browse all TTPs in the 'rta' sub-directory 3. APTSimulator The APTSimulator tool [8] is automatically downloaded. Simply extract the Zip archive and supply the zip password of 'apt'. C:\\terraform\\APTSimulator.zip Invoke a cmd prompt and run the batch file script: C:\\terraform\\ATPSimulator\\APTSimulator\\APTSimulator.bat","title":"Running APT Simulation Tools"},{"location":"cost/","text":"Cost Analysis Important Information As this tool spins up cloud resources, it will result in charges to your Azure account. Efforts have been made to minimize the costs incurred, but the tool author is not responsible for any charges or security issues that may result from usage of this tool. Be sure to tear down all resources when not using them. Cost Analysis / Pricing Estimate As this tool spins up cloud resources, it will result in charges to your Azure subscription. Efforts have been made to minimize the costs incurred and research the best options for most uses cases. The best way to use this is reference the estimated cost below, check your Azure costs daily, and verify them against this information included below. Be sure to tear down all resources when not using them. There are other small costs associated with Azure cloud resources, but the most expensive resources by far are the Azure Virtual Machines. When it comes to Compute VM resources, Azure is more expensive than AWS. If you are looking to run this range in AWS, check out the sister project, BlueCloud: https://github.com/iknowjason/BlueCloud By default, both the Windows 10 Pro and Domain Controller are using a Standard_D2as_v4 instance size, which is the lowest cost hardware that I could find which will provide sufficient performance. The Hunting ELK SIEM system requires a scaled up Linux instance size of Standard_D4s_v3 . This is because it uses HELK install option four for data science capabilities. Reference the Azure \"Windows Virtual Machine Pricing\" for the most up to date pricing: https://azure.microsoft.com/en-us/pricing/details/virtual-machines/windows/ Reference the Azure \"Linux Virtual Machines Pricing\" for the most up to date pricing on the Linux VM: https://azure.microsoft.com/en-us/pricing/details/virtual-machines/linux/ Here are the defaults I've researched for this range. Each Windows and Linux VM should approximately accrue the following with range defaults: Table: Azure Accrued Costs per VM with Windows License Included System Default Size Default Region 1 day cost 7 day cost 30 day cost Win10Pro Standard_D2as_v4 US East $2.30 $16.10 $70.08 DC Standard_D2as_v4 US East $2.30 $16.10 $70.08 HELK Standard_D4s_v3 US East $4.60 $32.26 $140.16 Changing Default VM Instance Size in ad.py To change the default hardware instance sizes for each VM, modify the following variables in ad.py: # The instance size for each system size_win10 = \"Standard_D2as_v4\" size_dc = \"Standard_D2as_v4\" # Note: Hunting ELK install options #4 requires 8 GB available memory size_helk = \"Standard_D4s_v3\"","title":"Cost"},{"location":"cost/#cost-analysis","text":"","title":"Cost Analysis"},{"location":"cost/#important-information","text":"As this tool spins up cloud resources, it will result in charges to your Azure account. Efforts have been made to minimize the costs incurred, but the tool author is not responsible for any charges or security issues that may result from usage of this tool. Be sure to tear down all resources when not using them.","title":"Important Information"},{"location":"cost/#cost-analysis-pricing-estimate","text":"As this tool spins up cloud resources, it will result in charges to your Azure subscription. Efforts have been made to minimize the costs incurred and research the best options for most uses cases. The best way to use this is reference the estimated cost below, check your Azure costs daily, and verify them against this information included below. Be sure to tear down all resources when not using them. There are other small costs associated with Azure cloud resources, but the most expensive resources by far are the Azure Virtual Machines. When it comes to Compute VM resources, Azure is more expensive than AWS. If you are looking to run this range in AWS, check out the sister project, BlueCloud: https://github.com/iknowjason/BlueCloud By default, both the Windows 10 Pro and Domain Controller are using a Standard_D2as_v4 instance size, which is the lowest cost hardware that I could find which will provide sufficient performance. The Hunting ELK SIEM system requires a scaled up Linux instance size of Standard_D4s_v3 . This is because it uses HELK install option four for data science capabilities. Reference the Azure \"Windows Virtual Machine Pricing\" for the most up to date pricing: https://azure.microsoft.com/en-us/pricing/details/virtual-machines/windows/ Reference the Azure \"Linux Virtual Machines Pricing\" for the most up to date pricing on the Linux VM: https://azure.microsoft.com/en-us/pricing/details/virtual-machines/linux/ Here are the defaults I've researched for this range. Each Windows and Linux VM should approximately accrue the following with range defaults:","title":"Cost Analysis / Pricing Estimate"},{"location":"cost/#table-azure-accrued-costs-per-vm-with-windows-license-included","text":"System Default Size Default Region 1 day cost 7 day cost 30 day cost Win10Pro Standard_D2as_v4 US East $2.30 $16.10 $70.08 DC Standard_D2as_v4 US East $2.30 $16.10 $70.08 HELK Standard_D4s_v3 US East $4.60 $32.26 $140.16","title":"Table:  Azure Accrued Costs per VM with Windows License Included"},{"location":"cost/#changing-default-vm-instance-size-in-adpy","text":"To change the default hardware instance sizes for each VM, modify the following variables in ad.py: # The instance size for each system size_win10 = \"Standard_D2as_v4\" size_dc = \"Standard_D2as_v4\" # Note: Hunting ELK install options #4 requires 8 GB available memory size_helk = \"Standard_D4s_v3\"","title":"Changing Default VM Instance Size in ad.py"},{"location":"credits/","text":"Credits @ghostinthewires for his Terraform templates (https://github.com/ghostinthewires) @mosesrenegade for his Ansible Playbook integration with Terraform + Powershell script (https://github.com/mosesrenegade)","title":"Credits"},{"location":"credits/#credits","text":"@ghostinthewires for his Terraform templates (https://github.com/ghostinthewires) @mosesrenegade for his Ansible Playbook integration with Terraform + Powershell script (https://github.com/mosesrenegade)","title":"Credits"},{"location":"future/","text":"Future Ideas for Consideration Automate Azure AD Join Windows 10 Pro endpoints PurpleSharp Import user-specified CSV list for Azure AD and AD Azure Sentinel with Windows endpoints shipping logs to Azure Sentinel Azure Sentinel with AD deployment Azure Web App for Containers setup with a Juice Shop deployment","title":"Roadmap Ideas"},{"location":"future/#future-ideas-for-consideration","text":"Automate Azure AD Join Windows 10 Pro endpoints PurpleSharp Import user-specified CSV list for Azure AD and AD Azure Sentinel with Windows endpoints shipping logs to Azure Sentinel Azure Sentinel with AD deployment Azure Web App for Containers setup with a Juice Shop deployment","title":"Future Ideas for Consideration"},{"location":"infrastructure/","text":"Infrastructure and Credentials HELK + Velociraptor Linux OS username helk (Uses SSH public key auth) HELK Kibana Administrator Password for https port 443 helk:hunting Velociraptor GUI Administrator Password for Port 8889 vadmin:vadmin","title":"Creds and Access"},{"location":"infrastructure/#infrastructure-and-credentials","text":"HELK + Velociraptor Linux OS username helk (Uses SSH public key auth) HELK Kibana Administrator Password for https port 443 helk:hunting Velociraptor GUI Administrator Password for Port 8889 vadmin:vadmin","title":"Infrastructure and Credentials"},{"location":"install/","text":"Installation Note: Tested on Ubuntu Linux 20.04 Pre-Requisites Python: Tested version: 3.8.10 Terraform: Tested version: 1.1.2 Azure tenant with subscription Global Administrator role Important Security Information: Security Groups Some people might be concerned about publicly exposing these cloud resources. The ad.py script will auto-detect your source IP address and white list only that IP address. The managed_identity.py script has a variable called src_ip which you can manually edit for your source IP address. Step 1: Clone Clone this repository Step 2: Install python faker Install the python faker using pip. This is a dependency of some python scripts to generate users. Faker is required for the following three scripts: azure_ad.py, ad.py, managed_identity.py. $ pip3 install faker Step 3: Environment Setup Set up your environment to use Terraform There are two ways to set up your environment in order to run terraform. Option 1: az login as Global Administrator Install the az cli tool. Type az login and follow the prompts to authenticate as a Global Administrator. This is the fastest way. Option 2: Create an Azure Service Principal Creating an Azure Service Principal and assigning it permissions is educational, but slower. After you have a valid Azure subscription, create an Azure Service Principal with the correct permissions and add the four environment variables to your local shell using .env or .envrc: export ARM_SUBSCRIPTION_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_TENANT_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_CLIENT_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_CLIENT_SECRET=\"YOUR_SERVICE_PRINCIPAL_VALUES\" Here are some references for creating a Service Principal to use with Azure. Creating a Service Principal https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret Configuring a Service Principal to manage Azure Active Directory https://registry.terraform.io/providers/hashicorp/azuread/latest/docs/guides/service_principal_configuration Microsoft docs: Creating a Service Principal in Cloud Shell with Bash https://docs.microsoft.com/en-us/azure/developer/terraform/get-started-cloud-shell-bash?tabs=bash These are the settings that have worked best. For Azure AD, set up the Service Principal as Global Administrator and assign the following Graph API permissions: Application.ReadWrite.All User.ReadWrite.All Group.ReadWrite.All For building the Azure infrastructure resources, assigning the Service Principal a role of Owner can help as well. Step 4: Generate Terraform Run one of the PurpleCloud scripts to generate terraform. See the usage section for examples. Step 5: Run Terraform Run terraform terraform init terraform plan run.plan terraform apply run.plan Destroying the Range Destroy the range resources when you are finished: terraform destroy","title":"Installation"},{"location":"install/#installation","text":"Note: Tested on Ubuntu Linux 20.04","title":"Installation"},{"location":"install/#pre-requisites","text":"Python: Tested version: 3.8.10 Terraform: Tested version: 1.1.2 Azure tenant with subscription Global Administrator role","title":"Pre-Requisites"},{"location":"install/#important-security-information-security-groups","text":"Some people might be concerned about publicly exposing these cloud resources. The ad.py script will auto-detect your source IP address and white list only that IP address. The managed_identity.py script has a variable called src_ip which you can manually edit for your source IP address.","title":"Important Security Information:  Security Groups"},{"location":"install/#step-1-clone","text":"Clone this repository","title":"Step 1: Clone"},{"location":"install/#step-2-install-python-faker","text":"Install the python faker using pip. This is a dependency of some python scripts to generate users. Faker is required for the following three scripts: azure_ad.py, ad.py, managed_identity.py. $ pip3 install faker","title":"Step 2: Install python faker"},{"location":"install/#step-3-environment-setup","text":"Set up your environment to use Terraform There are two ways to set up your environment in order to run terraform.","title":"Step 3: Environment Setup"},{"location":"install/#option-1-az-login-as-global-administrator","text":"Install the az cli tool. Type az login and follow the prompts to authenticate as a Global Administrator. This is the fastest way.","title":"Option 1:  az login as Global Administrator"},{"location":"install/#option-2-create-an-azure-service-principal","text":"Creating an Azure Service Principal and assigning it permissions is educational, but slower. After you have a valid Azure subscription, create an Azure Service Principal with the correct permissions and add the four environment variables to your local shell using .env or .envrc: export ARM_SUBSCRIPTION_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_TENANT_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_CLIENT_ID=\"YOUR_SERVICE_PRINCIPAL_VALUES\" export ARM_CLIENT_SECRET=\"YOUR_SERVICE_PRINCIPAL_VALUES\" Here are some references for creating a Service Principal to use with Azure. Creating a Service Principal https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret Configuring a Service Principal to manage Azure Active Directory https://registry.terraform.io/providers/hashicorp/azuread/latest/docs/guides/service_principal_configuration Microsoft docs: Creating a Service Principal in Cloud Shell with Bash https://docs.microsoft.com/en-us/azure/developer/terraform/get-started-cloud-shell-bash?tabs=bash These are the settings that have worked best. For Azure AD, set up the Service Principal as Global Administrator and assign the following Graph API permissions: Application.ReadWrite.All User.ReadWrite.All Group.ReadWrite.All For building the Azure infrastructure resources, assigning the Service Principal a role of Owner can help as well.","title":"Option 2:  Create an Azure Service Principal"},{"location":"install/#step-4-generate-terraform","text":"Run one of the PurpleCloud scripts to generate terraform. See the usage section for examples.","title":"Step 4: Generate Terraform"},{"location":"install/#step-5-run-terraform","text":"Run terraform terraform init terraform plan run.plan terraform apply run.plan","title":"Step 5: Run Terraform"},{"location":"install/#destroying-the-range","text":"Destroy the range resources when you are finished: terraform destroy","title":"Destroying the Range"},{"location":"overview/","text":"Overview Identity lab supporting Azure AD and Active Directory enterprise deployment with SIEM in Azure. Easily build your own Pentest / Red Team / Cyber Range in Azure cloud. PurpleCloud was created as a platform for researching Azure Identity. This repository contains python scripts that function as Terraform code generators for different use cases. azure_ad.py Generate the terraform for a custom Azure AD security lab. It uses a python library (faker) to generate as many Azure AD users as you desire, also creating AD Groups and AD Applications. Contains a vulnerable privilege escalation scenario that can be optionally enabled. ad.py Create an Active Directory on-premise environment simulated with Azure VMs. This script is used to generate a more traditional infrastructure range. It can create an Active Directory Domain Services range, generating as many AD users as you wish. It also supports many other features such as Domain Join of Windows 10 systems, in addition to a SIEM instrumented with Sysmon. sentinel.py Create an Azure Sentinel deployment configured in a log analytics workspace. Optionally configure Windows 10 to ship security and Ssymon logs to Sentinel. Optionally configure an Active Diretory environment with Domain Join. storage.py Create some Azure storage resources, including a storage account, containers, blobs, file shares with files, key vault with secrets, keys, and certificate. managed_identity.py Create an Azure managed identity attack lab with an Azure VM, a user or system assigned identity for the VM, and some storage and key vault resources to practice with. phishing_app.py Create a multi-tenant Azure AD application that can be used for app consent phishing simulations. You can specify a custom display name for the app along with custom redirect_uri, homepage_url, and logout_url. Use Cases Research and pentest lab for Azure AD Security testing of Hybrid Join and Azure AD Joined devices EDR Testing lab PoC / Product Security Lab Enterprise Active Directory lab with domain joined devices Malware / reverse engineering to study artifacts against domain joined devices SIEM / Threat Hunting / DFIR / Live Response lab with HELK + Velociraptor [1, 2] Log aggregator architecture to forward logs to a cloud native SIEM (Azure Sentinel) Data Science research with HELK server, Jupyter notebooks Detection Engineering research with Mordor [3, 4]","title":"Overview"},{"location":"overview/#overview","text":"Identity lab supporting Azure AD and Active Directory enterprise deployment with SIEM in Azure. Easily build your own Pentest / Red Team / Cyber Range in Azure cloud. PurpleCloud was created as a platform for researching Azure Identity. This repository contains python scripts that function as Terraform code generators for different use cases.","title":"Overview"},{"location":"overview/#azure_adpy","text":"Generate the terraform for a custom Azure AD security lab. It uses a python library (faker) to generate as many Azure AD users as you desire, also creating AD Groups and AD Applications. Contains a vulnerable privilege escalation scenario that can be optionally enabled.","title":"azure_ad.py"},{"location":"overview/#adpy","text":"Create an Active Directory on-premise environment simulated with Azure VMs. This script is used to generate a more traditional infrastructure range. It can create an Active Directory Domain Services range, generating as many AD users as you wish. It also supports many other features such as Domain Join of Windows 10 systems, in addition to a SIEM instrumented with Sysmon.","title":"ad.py"},{"location":"overview/#sentinelpy","text":"Create an Azure Sentinel deployment configured in a log analytics workspace. Optionally configure Windows 10 to ship security and Ssymon logs to Sentinel. Optionally configure an Active Diretory environment with Domain Join.","title":"sentinel.py"},{"location":"overview/#storagepy","text":"Create some Azure storage resources, including a storage account, containers, blobs, file shares with files, key vault with secrets, keys, and certificate.","title":"storage.py"},{"location":"overview/#managed_identitypy","text":"Create an Azure managed identity attack lab with an Azure VM, a user or system assigned identity for the VM, and some storage and key vault resources to practice with.","title":"managed_identity.py"},{"location":"overview/#phishing_apppy","text":"Create a multi-tenant Azure AD application that can be used for app consent phishing simulations. You can specify a custom display name for the app along with custom redirect_uri, homepage_url, and logout_url.","title":"phishing_app.py"},{"location":"overview/#use-cases","text":"Research and pentest lab for Azure AD Security testing of Hybrid Join and Azure AD Joined devices EDR Testing lab PoC / Product Security Lab Enterprise Active Directory lab with domain joined devices Malware / reverse engineering to study artifacts against domain joined devices SIEM / Threat Hunting / DFIR / Live Response lab with HELK + Velociraptor [1, 2] Log aggregator architecture to forward logs to a cloud native SIEM (Azure Sentinel) Data Science research with HELK server, Jupyter notebooks Detection Engineering research with Mordor [3, 4]","title":"Use Cases"},{"location":"references/","text":"References [1] Velociraptor Website: https://www.velocidex.com/ [2] HELK Website: https://github.com/Cyb3rWard0g/HELK [3] Mordor Website: https://mordordatasets.com/introduction.html [4] Mordor Use Case: https://posts.specterops.io/enter-mordor-pre-recorded-security-events-from-simulated-adversarial-techniques-fdf5555c9eb1 [5] Atomic Red Team: https://github.com/redcanaryco/atomic-red-team [6] Invoke ART: https://github.com/redcanaryco/invoke-atomicredteam [7] Elastic Detection Rules: https://github.com/elastic/detection-rules [8] APTSimulator: https://github.com/NextronSystems/APTSimulator","title":"References"},{"location":"references/#references","text":"[1] Velociraptor Website: https://www.velocidex.com/ [2] HELK Website: https://github.com/Cyb3rWard0g/HELK [3] Mordor Website: https://mordordatasets.com/introduction.html [4] Mordor Use Case: https://posts.specterops.io/enter-mordor-pre-recorded-security-events-from-simulated-adversarial-techniques-fdf5555c9eb1 [5] Atomic Red Team: https://github.com/redcanaryco/atomic-red-team [6] Invoke ART: https://github.com/redcanaryco/invoke-atomicredteam [7] Elastic Detection Rules: https://github.com/elastic/detection-rules [8] APTSimulator: https://github.com/NextronSystems/APTSimulator","title":"References"},{"location":"tools/aad/","text":"Azure Active Directory lab Generating an Azure AD lab using azure_ad.py . This generates terraform formatted HCL files for users.tf . If applications and groups are created, the apps.tf and groups.tf will also be created. Generate a basic Azure AD lab Usage Example: Generate a basic Azure AD lab $ python3 azure_ad.py --upn rtcfingroup.com Description: This will generate an Azure AD range with a UPN suffix of rtcfingroup.com with 100 users. It will output three files. The Azure AD password for all users will be automatically generated and output after terraform apply. azure_users.csv: A csv including the Azure AD user's full name, username, and email address. azure_usernames.txt: A file including just the usernames. azure_emails.txt: A file including just the email addresses. users.tf: Terraform file that will build the users. Generate an Azure AD lab with 1,000 users Usage Example: Generate an Azure AD lab with 1,000 users $ python3 azure_ad.py --upn rtcfingroup.com --count 1000 Description: Same as above, except generate 1,000 users in Azure AD. Running terraform apply will generate a random password shared by all users. The password applied to all users will be displayed at the end of terraform apply . To display the passwor again, run terraform output . Generate a lab with Azure applications and groups Usage Example: Generate a lab with Azure applications and groups $ python3 azure_ad.py --upn rtcfingroup.com --count 500 --apps 3 --groups 5 Description: Same as above, except generate 500 users in Azure AD. Create 3 Azure applications and 5 groups. Automatically put the 500 users into separate groups. apps.tf: A terraform file with the Azure applications. groups.tf: A terraform file with the Azure groups. Generate a lab for Service Principal abuse attack primitives Usage Example: Generate a lab for Service Principal abuse attack primitives $ python3 azure_ad.py -c 25 --upn rtcfingroup.com --apps 7 -aa -ga -pra Description: This will generate an Azure AD range with a UPN suffix of rtcfingroup.com with 25 users. It will add some service principal abuse attack primitives to some random resources. First, the --apps 7 will add 7 Azure AD applications (App Registrations) with associated Service Principals (Enterprise Applications). The -aa flag will assign an Application Administrator role randomly to one of the 25 Azure AD users. The -ga flag will assign the Global Administrator role randomly to one of the 7 application SPs. Finally, the -pra flag will assign the Privileged role administrator role randomly to one of the other 7 application SPs.","title":"Azure AD lab"},{"location":"tools/aad/#azure-active-directory-lab","text":"Generating an Azure AD lab using azure_ad.py . This generates terraform formatted HCL files for users.tf . If applications and groups are created, the apps.tf and groups.tf will also be created.","title":"Azure Active Directory lab"},{"location":"tools/aad/#generate-a-basic-azure-ad-lab","text":"Usage Example: Generate a basic Azure AD lab $ python3 azure_ad.py --upn rtcfingroup.com Description: This will generate an Azure AD range with a UPN suffix of rtcfingroup.com with 100 users. It will output three files. The Azure AD password for all users will be automatically generated and output after terraform apply. azure_users.csv: A csv including the Azure AD user's full name, username, and email address. azure_usernames.txt: A file including just the usernames. azure_emails.txt: A file including just the email addresses. users.tf: Terraform file that will build the users.","title":"Generate a basic Azure AD lab"},{"location":"tools/aad/#generate-an-azure-ad-lab-with-1000-users","text":"Usage Example: Generate an Azure AD lab with 1,000 users $ python3 azure_ad.py --upn rtcfingroup.com --count 1000 Description: Same as above, except generate 1,000 users in Azure AD. Running terraform apply will generate a random password shared by all users. The password applied to all users will be displayed at the end of terraform apply . To display the passwor again, run terraform output .","title":"Generate an Azure AD lab with 1,000 users"},{"location":"tools/aad/#generate-a-lab-with-azure-applications-and-groups","text":"Usage Example: Generate a lab with Azure applications and groups $ python3 azure_ad.py --upn rtcfingroup.com --count 500 --apps 3 --groups 5 Description: Same as above, except generate 500 users in Azure AD. Create 3 Azure applications and 5 groups. Automatically put the 500 users into separate groups. apps.tf: A terraform file with the Azure applications. groups.tf: A terraform file with the Azure groups.","title":"Generate a lab with Azure applications and groups"},{"location":"tools/aad/#generate-a-lab-for-service-principal-abuse-attack-primitives","text":"Usage Example: Generate a lab for Service Principal abuse attack primitives $ python3 azure_ad.py -c 25 --upn rtcfingroup.com --apps 7 -aa -ga -pra Description: This will generate an Azure AD range with a UPN suffix of rtcfingroup.com with 25 users. It will add some service principal abuse attack primitives to some random resources. First, the --apps 7 will add 7 Azure AD applications (App Registrations) with associated Service Principals (Enterprise Applications). The -aa flag will assign an Application Administrator role randomly to one of the 25 Azure AD users. The -ga flag will assign the Global Administrator role randomly to one of the 7 application SPs. Finally, the -pra flag will assign the Privileged role administrator role randomly to one of the other 7 application SPs.","title":"Generate a lab for Service Principal abuse attack primitives"},{"location":"tools/ad/","text":"Azure VMs, Active Directory, and SIEM Generating an Azure infrastructure lab using ad.py Generate a single Windows 10 Endpoint with Sysmon installed Usage Example: Generate a single Windows 10 Endpoint with Sysmon installed $ python3 ad.py --endpoint 1 Description: This will generate a single Windows 10 Endpoint and generate a random, unique password with a default local Administrator account named 'RTCAdmin'. This generates four terraform files: - main.tf: Terraform file with resource group and location. - network.tf: Terraform file with VNet and subnets. - nsg.tf: Terraform file with Network Security Groups. - win10-1.tf: Terraform file with Windows 10 Pro configuration. Build a Domain Controller with Forest and Users + Windows Domain Join $ python3 ad.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --ad_users 500 --endpoints 2 --domain_join Description: This will create a Domain Controller in dc.tf and install AD DS with forest name of rtcfingroup.com. This will create a custom local administrator account and password with 500 domain users. The domain users will be written to ad_users.csv and will have the password specified in --password. Note that domain join is disabled by default for Windows 10 Pro but the domain_join parameter enables it for all Windows 10 Pro created. This will also create two Windows 10 Pro terraform files (win10-1.tf, win10-2.tf) as well as a terraform file for the Domain Controller (dc.tf). Build a Hunting ELK server and automatically export sysmon winlog beat logs $ python3 ad.py --helk --endpoint 1 Description: This will add a Hunting ELK server with one Windows 10 Endpoint. The winlogbeat agent will be installed on Windows 10 Pro and the logs will be sent to the HELK server. Velociraptor will be installed on the HELK server and the Velociraptor agent on Windows 10 Pro. The endpoint will automatically register to the Velociraptor server running on HELK. This will create a terraform file for the HELK server (helk.tf) Advanced Usage --resource_group <rg_name> : Name of the Azure resource group to automatically create (Default: PurpleCloud) --location <location> : The Azure location to use (Default: eastus) --endpoints <num_of_endpoints> : Number of Windows 10 Professional systems to build (Default: 0) --helk : Create a hunting ELK server (with Velociraptor installed) (Default: Disabled) --domain_controller : Create a Domain Controller and install AD DS with Forest (Default: Disabled) --ad_domain <domain> : The name of the AD Domain to provision (Default: rtc.local) --ad_users <num_of_domain_users> : The number of AD users to automatically build (Default: Disabled) --admin <admin_username> : The Local Administrator account (Default: RTCAdmin) --password <password> : The local Administrator password and default AD user password (Default: auto generate a strong password) --domain_join : Join the Windows 10 Pro systems to the AD Domain (Default: false) --auto_logon : Automatically logon the domain user with their credentials upon system start (Default: false) Edit script options in ad.py Windows 10 Pro configuration: The Windows 10 Pro default configuration can be adjusted to meet your needs. These are located in the config_win10_endpoints dictionary: hostname_base: The base Windows 10 hostname (Default: win10) join_domain: Whether to join the Windows 10 Pro to the AD Domain. This is disabled by default. So if you add a DC and want to join the Windows 10 Pro systems to the AD Domain, you can set this to true. Or you can use the command line parameter --domain-join . auto_logon_domain_users: Configure the endpoint (via registry) to automatically log in the domain user. This will randomly select an AD user. Disabled by default and requires domain join and DC. install_sysmon: Automatically install Sysmon with Swift on Security configuration (Default: Enabled) install_art: Install Atomic Red Team (art). (Default: Enabled) config_win10_endpoint = { \"hostname_base\":\"win10\", \"join_domain\":\"false\", \"auto_logon_domain_user\":\"false\", \"install_sysmon\":\"true\", \"install_art\":\"true\", } Default AD Users: There is a python dictionary specifying the default AD users. This can be changed to suit your needs. These are the first five users automaticaly created. After the first five, users are randomly generated to meet the --ad_users <number> amount. Here is the default_ad_users list along with the first user, that can be searched for in the file: default_ad_users = [ { \"name\":\"Lars Borgerson\", \"ou\": \"CN=users,DC=rtc,DC=local\", \"password\": get_password(), \"domain_admin\":\"\", \"groups\":\"IT\" }, Network Subnets configuration: The configuration for the subnets can be adjusted in the python list named config_subnets . Some changes include changing the default subnet names or adding/removing subnets. By default there are four subnets created. Other Details: ranges.log: * The ranges.log file writes out important information as the range is built, such as VM details. You can use it to track things. Logging Passwords: By default, all passwords are randomly generated. So if you are not aware of this, it might be easy to lose track of a password. For this reason we have added a logging feature that captures all passwords created. The ad.py script will automatically log all output to a logfile called ranges.log . This is for the specific purpose of being able to track the ranges created and the passwords that are auto-generated for AD users and local Administrator accounts. You can also type terraform output as a secondary way to get the password and details for each virtual machine. Azure Network Security Groups: By default, the ad.py script will try to auto-detect your public IP address using a request to http://ifconfig.me. Your public IP address will be used to white list the Azure NSG source prefix setting. You can over-ride this behavior by changing the override_whitelist variable to False. By default it will then use the value set in whitelist_nsg . This is set to wide open (\"*\") and you can change this to a static value. Terraform Outputs You can get the details of each Virtual Machine, including passwords, by typing terraform output .","title":"Azure VMs, Active Directory, and SIEM"},{"location":"tools/ad/#azure-vms-active-directory-and-siem","text":"Generating an Azure infrastructure lab using ad.py","title":"Azure VMs, Active Directory, and SIEM"},{"location":"tools/ad/#generate-a-single-windows-10-endpoint-with-sysmon-installed","text":"Usage Example: Generate a single Windows 10 Endpoint with Sysmon installed $ python3 ad.py --endpoint 1 Description: This will generate a single Windows 10 Endpoint and generate a random, unique password with a default local Administrator account named 'RTCAdmin'. This generates four terraform files: - main.tf: Terraform file with resource group and location. - network.tf: Terraform file with VNet and subnets. - nsg.tf: Terraform file with Network Security Groups. - win10-1.tf: Terraform file with Windows 10 Pro configuration.","title":"Generate a single Windows 10 Endpoint with Sysmon installed"},{"location":"tools/ad/#build-a-domain-controller-with-forest-and-users-windows-domain-join","text":"$ python3 ad.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --ad_users 500 --endpoints 2 --domain_join Description: This will create a Domain Controller in dc.tf and install AD DS with forest name of rtcfingroup.com. This will create a custom local administrator account and password with 500 domain users. The domain users will be written to ad_users.csv and will have the password specified in --password. Note that domain join is disabled by default for Windows 10 Pro but the domain_join parameter enables it for all Windows 10 Pro created. This will also create two Windows 10 Pro terraform files (win10-1.tf, win10-2.tf) as well as a terraform file for the Domain Controller (dc.tf).","title":"Build a Domain Controller with Forest and Users + Windows Domain Join"},{"location":"tools/ad/#build-a-hunting-elk-server-and-automatically-export-sysmon-winlog-beat-logs","text":"$ python3 ad.py --helk --endpoint 1 Description: This will add a Hunting ELK server with one Windows 10 Endpoint. The winlogbeat agent will be installed on Windows 10 Pro and the logs will be sent to the HELK server. Velociraptor will be installed on the HELK server and the Velociraptor agent on Windows 10 Pro. The endpoint will automatically register to the Velociraptor server running on HELK. This will create a terraform file for the HELK server (helk.tf)","title":"Build a Hunting ELK server and automatically export sysmon winlog beat logs"},{"location":"tools/ad/#advanced-usage","text":"--resource_group <rg_name> : Name of the Azure resource group to automatically create (Default: PurpleCloud) --location <location> : The Azure location to use (Default: eastus) --endpoints <num_of_endpoints> : Number of Windows 10 Professional systems to build (Default: 0) --helk : Create a hunting ELK server (with Velociraptor installed) (Default: Disabled) --domain_controller : Create a Domain Controller and install AD DS with Forest (Default: Disabled) --ad_domain <domain> : The name of the AD Domain to provision (Default: rtc.local) --ad_users <num_of_domain_users> : The number of AD users to automatically build (Default: Disabled) --admin <admin_username> : The Local Administrator account (Default: RTCAdmin) --password <password> : The local Administrator password and default AD user password (Default: auto generate a strong password) --domain_join : Join the Windows 10 Pro systems to the AD Domain (Default: false) --auto_logon : Automatically logon the domain user with their credentials upon system start (Default: false)","title":"Advanced Usage"},{"location":"tools/ad/#edit-script-options-in-adpy","text":"Windows 10 Pro configuration: The Windows 10 Pro default configuration can be adjusted to meet your needs. These are located in the config_win10_endpoints dictionary: hostname_base: The base Windows 10 hostname (Default: win10) join_domain: Whether to join the Windows 10 Pro to the AD Domain. This is disabled by default. So if you add a DC and want to join the Windows 10 Pro systems to the AD Domain, you can set this to true. Or you can use the command line parameter --domain-join . auto_logon_domain_users: Configure the endpoint (via registry) to automatically log in the domain user. This will randomly select an AD user. Disabled by default and requires domain join and DC. install_sysmon: Automatically install Sysmon with Swift on Security configuration (Default: Enabled) install_art: Install Atomic Red Team (art). (Default: Enabled) config_win10_endpoint = { \"hostname_base\":\"win10\", \"join_domain\":\"false\", \"auto_logon_domain_user\":\"false\", \"install_sysmon\":\"true\", \"install_art\":\"true\", } Default AD Users: There is a python dictionary specifying the default AD users. This can be changed to suit your needs. These are the first five users automaticaly created. After the first five, users are randomly generated to meet the --ad_users <number> amount. Here is the default_ad_users list along with the first user, that can be searched for in the file: default_ad_users = [ { \"name\":\"Lars Borgerson\", \"ou\": \"CN=users,DC=rtc,DC=local\", \"password\": get_password(), \"domain_admin\":\"\", \"groups\":\"IT\" }, Network Subnets configuration: The configuration for the subnets can be adjusted in the python list named config_subnets . Some changes include changing the default subnet names or adding/removing subnets. By default there are four subnets created. Other Details: ranges.log: * The ranges.log file writes out important information as the range is built, such as VM details. You can use it to track things. Logging Passwords: By default, all passwords are randomly generated. So if you are not aware of this, it might be easy to lose track of a password. For this reason we have added a logging feature that captures all passwords created. The ad.py script will automatically log all output to a logfile called ranges.log . This is for the specific purpose of being able to track the ranges created and the passwords that are auto-generated for AD users and local Administrator accounts. You can also type terraform output as a secondary way to get the password and details for each virtual machine. Azure Network Security Groups: By default, the ad.py script will try to auto-detect your public IP address using a request to http://ifconfig.me. Your public IP address will be used to white list the Azure NSG source prefix setting. You can over-ride this behavior by changing the override_whitelist variable to False. By default it will then use the value set in whitelist_nsg . This is set to wide open (\"*\") and you can change this to a static value.","title":"Edit script options in ad.py"},{"location":"tools/ad/#terraform-outputs","text":"You can get the details of each Virtual Machine, including passwords, by typing terraform output .","title":"Terraform Outputs"},{"location":"tools/midentity/","text":"Azure Managed Identity lab $ python3 managed_identity.py -u <UPN_SUFFIX> -n <NAME> -l <LOCATION> -a <ADMIN_USERNAME> -p <PASSWORD> -sa -ua <USER_ASSGNED_IDENTITY> Create a security lab for practicing managed identity attack and defense. Generates a terraform format HCL file for managed_identity.tf , providers.tf , and mi_user.tf . Resources Created One Azure AD User with a configurable Role Assignment (Default: Virtual Machine Contributor) One Azure VM with a Managed Identity configured (Default: User Assigned Identity with Reader on the Subscription) Azure Storage Account (1) Azure Containers (3) The containers have three different access levels (Blob, Container, Private) Azure Blobs (3). All three are uploaded to all three containers. Azure Shares (2) Two files are uploaded to the two shares Azure Key Vault Secrets (3) Private Keys (1) Certificates (1) Options -u <UPN_SUFFIX> : Mandatory. Specify the correct UPN Suffix for your tenant. Needed for creating the Azure AD user. -a <ADMIN_USERNAME> : Specify the local Administrator Username for the Windows 10 Pro Azure VM. (Default: MIAdmin) -p <PASSWORD> : Specify the password for the local Administrator account on the VM as well as the Azure AD user (Default: Auto-generated) -sa : Enables the System Assigned Identity for the Azure VM (Note: both user assigned and system assigned can be enabled) -ua reader|contributor|owner : Enables the User Assigned Identity for the Azure VM with possible values of reader, contributor, owner (Default: reader) -n <NAME> : Specify a resource group name and name for other resources -l <LOCATION> : Specify a different location (Default: centralus) Other Variables in Script # This is the src_ip for white listing Azure NSGs # allow every public IP address by default variable \"src_ip\" { default = \"0.0.0.0/0\" } The role of the managed identity by default is scoped to the subscription # Assign the reader role on the Key vault to the Managed Identity resource \"azurerm_role_assignment\" \"uai\" { #Scope to the key vault in line below #scope = azurerm_key_vault.example.id #Scope to the subscription in line below scope = data.azurerm_subscription.mi.id role_definition_name = \"ROLE_DEFINITION_NAME\" principal_id = azurerm_user_assigned_identity.uai.principal_id } The role of the Azure AD user # The role scoped to subscription for AAD user # uncomment as needed variable \"user_role\" { default = \"Virtual Machine Contributor\" #default = \"Contributor\" #default = \"Reader\" #default = \"Owner\" }","title":"Azure Managed Identity lab"},{"location":"tools/midentity/#azure-managed-identity-lab","text":"$ python3 managed_identity.py -u <UPN_SUFFIX> -n <NAME> -l <LOCATION> -a <ADMIN_USERNAME> -p <PASSWORD> -sa -ua <USER_ASSGNED_IDENTITY> Create a security lab for practicing managed identity attack and defense. Generates a terraform format HCL file for managed_identity.tf , providers.tf , and mi_user.tf .","title":"Azure Managed Identity lab"},{"location":"tools/midentity/#resources-created","text":"One Azure AD User with a configurable Role Assignment (Default: Virtual Machine Contributor) One Azure VM with a Managed Identity configured (Default: User Assigned Identity with Reader on the Subscription) Azure Storage Account (1) Azure Containers (3) The containers have three different access levels (Blob, Container, Private) Azure Blobs (3). All three are uploaded to all three containers. Azure Shares (2) Two files are uploaded to the two shares Azure Key Vault Secrets (3) Private Keys (1) Certificates (1)","title":"Resources Created"},{"location":"tools/midentity/#options","text":"-u <UPN_SUFFIX> : Mandatory. Specify the correct UPN Suffix for your tenant. Needed for creating the Azure AD user. -a <ADMIN_USERNAME> : Specify the local Administrator Username for the Windows 10 Pro Azure VM. (Default: MIAdmin) -p <PASSWORD> : Specify the password for the local Administrator account on the VM as well as the Azure AD user (Default: Auto-generated) -sa : Enables the System Assigned Identity for the Azure VM (Note: both user assigned and system assigned can be enabled) -ua reader|contributor|owner : Enables the User Assigned Identity for the Azure VM with possible values of reader, contributor, owner (Default: reader) -n <NAME> : Specify a resource group name and name for other resources -l <LOCATION> : Specify a different location (Default: centralus)","title":"Options"},{"location":"tools/midentity/#other-variables-in-script","text":"# This is the src_ip for white listing Azure NSGs # allow every public IP address by default variable \"src_ip\" { default = \"0.0.0.0/0\" } The role of the managed identity by default is scoped to the subscription # Assign the reader role on the Key vault to the Managed Identity resource \"azurerm_role_assignment\" \"uai\" { #Scope to the key vault in line below #scope = azurerm_key_vault.example.id #Scope to the subscription in line below scope = data.azurerm_subscription.mi.id role_definition_name = \"ROLE_DEFINITION_NAME\" principal_id = azurerm_user_assigned_identity.uai.principal_id } The role of the Azure AD user # The role scoped to subscription for AAD user # uncomment as needed variable \"user_role\" { default = \"Virtual Machine Contributor\" #default = \"Contributor\" #default = \"Reader\" #default = \"Owner\" }","title":"Other Variables in Script"},{"location":"tools/phishing_app/","text":"Phishing Application $ python3 phishing_app.py --name <DISPLAY_NAME> --redirect_uri <REDIRECT_URI> This generates a terraform format HCL file for phishing_app.tf . The following Graph API delegated scope permissions are automatically created for the application: Contacts.Read Mail.Read Mail.Send Files.Read Files.Read.All Files.ReadWrite.All User.Read API permissions can be customized by adding the id for the correct permission, as shown in the code block below: resource_access { id = \"570282fd-fa5c-430d-a7fd-fc8dc98a9dca\" # Mail.Read type = \"Scope\" } Full command line parameters --name <DISPLAY_NAME> : Specify the display name for the application (Default: Sample App) --redirect_uri <REDIRECT_URI> : The redirect uri that the application uses to receive OAuth tokens. (Default: \"http://localhost:30662/gettoken\") --homepage_url <HOMEPAGE_URL> : The homepage URL used by the application. (Default: \"https://localhost:30662\") --logout_url <LOGOUT_URL> : The logout URL used by the application. (Default: \"https://localhost:30662/logout\")","title":"Phishing App"},{"location":"tools/phishing_app/#phishing-application","text":"$ python3 phishing_app.py --name <DISPLAY_NAME> --redirect_uri <REDIRECT_URI> This generates a terraform format HCL file for phishing_app.tf . The following Graph API delegated scope permissions are automatically created for the application: Contacts.Read Mail.Read Mail.Send Files.Read Files.Read.All Files.ReadWrite.All User.Read API permissions can be customized by adding the id for the correct permission, as shown in the code block below: resource_access { id = \"570282fd-fa5c-430d-a7fd-fc8dc98a9dca\" # Mail.Read type = \"Scope\" }","title":"Phishing Application"},{"location":"tools/phishing_app/#full-command-line-parameters","text":"--name <DISPLAY_NAME> : Specify the display name for the application (Default: Sample App) --redirect_uri <REDIRECT_URI> : The redirect uri that the application uses to receive OAuth tokens. (Default: \"http://localhost:30662/gettoken\") --homepage_url <HOMEPAGE_URL> : The homepage URL used by the application. (Default: \"https://localhost:30662\") --logout_url <LOGOUT_URL> : The logout URL used by the application. (Default: \"https://localhost:30662/logout\")","title":"Full command line parameters"},{"location":"tools/sentinel/","text":"Azure Sentinel lab Overview This tool generates an Azure sentinel lab with optional Windows 10 Endpoints forwarding logs to the Sentinel Log Analytics workspace. Optionally configure a Domain Controller with Domain Join. Windows 10 Azure VMs automatically install and configure the legacy Microsoft Monitoring Agent (MMA) or Operations Management Suite (OMS) and send logs to the Log Analytics workspace. The endpoints will install Sysmon by default. Note that some manual configuration steps are required for final logging configuration. Manual Logging Configuration After creating the lab there are a couple of manual setup steps required. Step 1: Add Sysmon Channel in log analytics agents configuration Navigate into the log analytics workspace and agents configuration . Select the add windows event log . Type Microsoft-Windows-Sysmon/Operational into the Log name input field and select Apply. The following screen shot shows how the configuration should look. Step 2: Enable the Sentinel Data Connector - \"Security Events via Legacy Agent\" Navigate into Sentinel. Find Data connectors under Configuration . In the search field or by scrolling below, find the connector named Security Events via Legacy Agent . Select open the connector page in the lower right hand corner. Select Common under which events to stream and Apply changes. Verify that the connector shows a green highlight and shows connected, as shown below. Step 3: Reboot Virtual Machines and Verify connected in Agents Management Verify that all Windows 10 Virtual machines show as connected. Verify this by navigating into the Log Analytics workspace and looking under Agents management under settings . Reboot each of the Azure Virtual Machines and then look to verify that they all list a connected status. It should look like the following screen shot shown below. Note: When configuring Domain Join with Active Directory, the Azure Windows 10 Professional machines will automatically reboot after joining the domain, so no manual reboot is necessary. After the Virtual Machines reboot, you can navigate into the Sentinel overview page and start to see new Sysmon and Windows security event logs in the Overview. The Sysmon logs will show under EVENT table while the security event logs will show under the SECURITYEVENT table. Usage Examples Generate a simple Azure Sentinel lab $ python3 sentinel.py This generates an Azure Sentinel lab with a Log Analytics workspace. This generates a terraform format HCL file for sentinel.tf and providers.tf . -l <LOCATION> : Specify a different location (Default: eastus) -odc : Optionally enables the Office 365 data connector for Sentinel. -adc : Optionally enables the Azure AD data connector for Sentinel. Generate a single Windows 10 Endpoint with Sysmon installed Usage Example: Generate a single Windows 10 Endpoint with Sysmon installed $ python3 sentinel.py --endpoint 1 Build a Domain Controller with Forest and Users + Windows Domain Join $ python3 sentinel.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --ad_users 500 --endpoints 2 --domain_join Description: This will automatically create an Azure Sentinel deployment. This will also create a Domain Controller in dc_sentinel.tf and install AD DS with forest name of rtcfingroup.com. This will create a custom local administrator account and password with 500 domain users. The domain users will be written to ad_users.csv and will have the password specified in --password. Note that domain join is disabled by default for Windows 10 Pro but the domain_join parameter enables it for all Windows 10 Pro created. This will also create two Windows 10 Pro terraform files (win10-1.tf, win10-2.tf) as well as a terraform file for the Domain Controller (dc_sentinel.tf). For the two Windows 10 Pro endpoints, they will be configured with the Microsoft Monitoring Agent (MMA) to ship logs to Log Analytics Workspace with Azure Sentinel. Advanced Usage --resource_group <rg_name> : Name of the Azure resource group to automatically create (Default: PurpleCloud) --location <location> : The Azure location to use (Default: eastus) --endpoints <num_of_endpoints> : Number of Windows 10 Professional systems to build (Default: 0) --domain_controller : Create a Domain Controller and install AD DS with Forest (Default: Disabled) --ad_domain <domain> : The name of the AD Domain to provision (Default: rtc.local) --ad_users <num_of_domain_users> : The number of AD users to automatically build (Default: Disabled) --admin <admin_username> : The Local Administrator account (Default: RTCAdmin) --password <password> : The local Administrator password and default AD user password (Default: auto generate a strong password) --domain_join : Join the Windows 10 Pro systems to the AD Domain (Default: false) --auto_logon : Automatically logon the domain user with their credentials upon system start (Default: false) Edit script options in sentinel.py Windows 10 Pro configuration: The Windows 10 Pro default configuration can be adjusted to meet your needs. These are located in the config_win10_endpoints dictionary: hostname_base: The base Windows 10 hostname (Default: win10) join_domain: Whether to join the Windows 10 Pro to the AD Domain. This is disabled by default. So if you add a DC and want to join the Windows 10 Pro systems to the AD Domain, you can set this to true. Or you can use the command line parameter --domain-join . auto_logon_domain_users: Configure the endpoint (via registry) to automatically log in the domain user. This will randomly select an AD user. Disabled by default and requires domain join and DC. install_sysmon: Automatically install Sysmon with Swift on Security configuration (Default: Enabled) install_art: Install Atomic Red Team (art). (Default: Enabled) config_win10_endpoint = { \"hostname_base\":\"win10\", \"join_domain\":\"false\", \"auto_logon_domain_user\":\"false\", \"install_sysmon\":\"true\", \"install_art\":\"true\", } Default AD Users: There is a python dictionary specifying the default AD users. This can be changed to suit your needs. These are the first five users automaticaly created. After the first five, users are randomly generated to meet the --ad_users <number> amount. Here is the default_ad_users list along with the first user, that can be searched for in the file: default_ad_users = [ { \"name\":\"Lars Borgerson\", \"ou\": \"CN=users,DC=rtc,DC=local\", \"password\": get_password(), \"domain_admin\":\"\", \"groups\":\"IT\" }, Network Subnets configuration: The configuration for the subnets can be adjusted in the python list named config_subnets . Some changes include changing the default subnet names or adding/removing subnets. By default there are four subnets created. Other Details: * ranges.log: The ranges.log file writes out important information as the range is built, such as VM details. You can use it to track things. Logging Passwords: By default, all passwords are randomly generated. So if you are not aware of this, it might be easy to lose track of a password. For this reason we have added a logging feature that captures all passwords created. The sentinel.py script will automatically log all output to a logfile called ranges.log . This is for the specific purpose of being able to track the ranges created and the passwords that are auto-generated for AD users and local Administrator accounts. You can also type terraform output as a secondary way to get the password and details for each virtual machine. Azure Network Security Groups: By default, the sentinel.py script will try to auto-detect your public IP address using a request to http://ifconfig.me. Your public IP address will be used to white list the Azure NSG source prefix setting. You can over-ride this behavior by changing the override_whitelist variable to False. By default it will then use the value set in whitelist_nsg . This is set to wide open (\"*\") and you can change this to a static value. Terraform Outputs You can get the details of each Virtual Machine, including passwords, by typing terraform output .","title":"Azure Sentinel lab"},{"location":"tools/sentinel/#azure-sentinel-lab","text":"","title":"Azure Sentinel lab"},{"location":"tools/sentinel/#overview","text":"This tool generates an Azure sentinel lab with optional Windows 10 Endpoints forwarding logs to the Sentinel Log Analytics workspace. Optionally configure a Domain Controller with Domain Join. Windows 10 Azure VMs automatically install and configure the legacy Microsoft Monitoring Agent (MMA) or Operations Management Suite (OMS) and send logs to the Log Analytics workspace. The endpoints will install Sysmon by default. Note that some manual configuration steps are required for final logging configuration.","title":"Overview"},{"location":"tools/sentinel/#manual-logging-configuration","text":"After creating the lab there are a couple of manual setup steps required.","title":"Manual Logging Configuration"},{"location":"tools/sentinel/#step-1-add-sysmon-channel-in-log-analytics-agents-configuration","text":"Navigate into the log analytics workspace and agents configuration . Select the add windows event log . Type Microsoft-Windows-Sysmon/Operational into the Log name input field and select Apply. The following screen shot shows how the configuration should look.","title":"Step 1:  Add Sysmon Channel in log analytics agents configuration"},{"location":"tools/sentinel/#step-2-enable-the-sentinel-data-connector-security-events-via-legacy-agent","text":"Navigate into Sentinel. Find Data connectors under Configuration . In the search field or by scrolling below, find the connector named Security Events via Legacy Agent . Select open the connector page in the lower right hand corner. Select Common under which events to stream and Apply changes. Verify that the connector shows a green highlight and shows connected, as shown below.","title":"Step 2:  Enable the Sentinel Data Connector - \"Security Events via Legacy Agent\""},{"location":"tools/sentinel/#step-3-reboot-virtual-machines-and-verify-connected-in-agents-management","text":"Verify that all Windows 10 Virtual machines show as connected. Verify this by navigating into the Log Analytics workspace and looking under Agents management under settings . Reboot each of the Azure Virtual Machines and then look to verify that they all list a connected status. It should look like the following screen shot shown below. Note: When configuring Domain Join with Active Directory, the Azure Windows 10 Professional machines will automatically reboot after joining the domain, so no manual reboot is necessary. After the Virtual Machines reboot, you can navigate into the Sentinel overview page and start to see new Sysmon and Windows security event logs in the Overview. The Sysmon logs will show under EVENT table while the security event logs will show under the SECURITYEVENT table.","title":"Step 3:  Reboot Virtual Machines and Verify connected in Agents Management"},{"location":"tools/sentinel/#usage-examples","text":"","title":"Usage Examples"},{"location":"tools/sentinel/#generate-a-simple-azure-sentinel-lab","text":"$ python3 sentinel.py This generates an Azure Sentinel lab with a Log Analytics workspace. This generates a terraform format HCL file for sentinel.tf and providers.tf . -l <LOCATION> : Specify a different location (Default: eastus) -odc : Optionally enables the Office 365 data connector for Sentinel. -adc : Optionally enables the Azure AD data connector for Sentinel.","title":"Generate a simple Azure Sentinel lab"},{"location":"tools/sentinel/#generate-a-single-windows-10-endpoint-with-sysmon-installed","text":"Usage Example: Generate a single Windows 10 Endpoint with Sysmon installed $ python3 sentinel.py --endpoint 1","title":"Generate a single Windows 10 Endpoint with Sysmon installed"},{"location":"tools/sentinel/#build-a-domain-controller-with-forest-and-users-windows-domain-join","text":"$ python3 sentinel.py --domain_controller --ad_domain rtcfingroup.com --admin RTCAdmin --password MyPassword012345 --ad_users 500 --endpoints 2 --domain_join Description: This will automatically create an Azure Sentinel deployment. This will also create a Domain Controller in dc_sentinel.tf and install AD DS with forest name of rtcfingroup.com. This will create a custom local administrator account and password with 500 domain users. The domain users will be written to ad_users.csv and will have the password specified in --password. Note that domain join is disabled by default for Windows 10 Pro but the domain_join parameter enables it for all Windows 10 Pro created. This will also create two Windows 10 Pro terraform files (win10-1.tf, win10-2.tf) as well as a terraform file for the Domain Controller (dc_sentinel.tf). For the two Windows 10 Pro endpoints, they will be configured with the Microsoft Monitoring Agent (MMA) to ship logs to Log Analytics Workspace with Azure Sentinel.","title":"Build a Domain Controller with Forest and Users + Windows Domain Join"},{"location":"tools/sentinel/#advanced-usage","text":"--resource_group <rg_name> : Name of the Azure resource group to automatically create (Default: PurpleCloud) --location <location> : The Azure location to use (Default: eastus) --endpoints <num_of_endpoints> : Number of Windows 10 Professional systems to build (Default: 0) --domain_controller : Create a Domain Controller and install AD DS with Forest (Default: Disabled) --ad_domain <domain> : The name of the AD Domain to provision (Default: rtc.local) --ad_users <num_of_domain_users> : The number of AD users to automatically build (Default: Disabled) --admin <admin_username> : The Local Administrator account (Default: RTCAdmin) --password <password> : The local Administrator password and default AD user password (Default: auto generate a strong password) --domain_join : Join the Windows 10 Pro systems to the AD Domain (Default: false) --auto_logon : Automatically logon the domain user with their credentials upon system start (Default: false)","title":"Advanced Usage"},{"location":"tools/sentinel/#edit-script-options-in-sentinelpy","text":"Windows 10 Pro configuration: The Windows 10 Pro default configuration can be adjusted to meet your needs. These are located in the config_win10_endpoints dictionary: hostname_base: The base Windows 10 hostname (Default: win10) join_domain: Whether to join the Windows 10 Pro to the AD Domain. This is disabled by default. So if you add a DC and want to join the Windows 10 Pro systems to the AD Domain, you can set this to true. Or you can use the command line parameter --domain-join . auto_logon_domain_users: Configure the endpoint (via registry) to automatically log in the domain user. This will randomly select an AD user. Disabled by default and requires domain join and DC. install_sysmon: Automatically install Sysmon with Swift on Security configuration (Default: Enabled) install_art: Install Atomic Red Team (art). (Default: Enabled) config_win10_endpoint = { \"hostname_base\":\"win10\", \"join_domain\":\"false\", \"auto_logon_domain_user\":\"false\", \"install_sysmon\":\"true\", \"install_art\":\"true\", } Default AD Users: There is a python dictionary specifying the default AD users. This can be changed to suit your needs. These are the first five users automaticaly created. After the first five, users are randomly generated to meet the --ad_users <number> amount. Here is the default_ad_users list along with the first user, that can be searched for in the file: default_ad_users = [ { \"name\":\"Lars Borgerson\", \"ou\": \"CN=users,DC=rtc,DC=local\", \"password\": get_password(), \"domain_admin\":\"\", \"groups\":\"IT\" }, Network Subnets configuration: The configuration for the subnets can be adjusted in the python list named config_subnets . Some changes include changing the default subnet names or adding/removing subnets. By default there are four subnets created. Other Details: * ranges.log: The ranges.log file writes out important information as the range is built, such as VM details. You can use it to track things. Logging Passwords: By default, all passwords are randomly generated. So if you are not aware of this, it might be easy to lose track of a password. For this reason we have added a logging feature that captures all passwords created. The sentinel.py script will automatically log all output to a logfile called ranges.log . This is for the specific purpose of being able to track the ranges created and the passwords that are auto-generated for AD users and local Administrator accounts. You can also type terraform output as a secondary way to get the password and details for each virtual machine. Azure Network Security Groups: By default, the sentinel.py script will try to auto-detect your public IP address using a request to http://ifconfig.me. Your public IP address will be used to white list the Azure NSG source prefix setting. You can over-ride this behavior by changing the override_whitelist variable to False. By default it will then use the value set in whitelist_nsg . This is set to wide open (\"*\") and you can change this to a static value.","title":"Edit script options in sentinel.py"},{"location":"tools/sentinel/#terraform-outputs","text":"You can get the details of each Virtual Machine, including passwords, by typing terraform output .","title":"Terraform Outputs"},{"location":"tools/storage/","text":"Azure Storage lab $ python3 storage.py -n <NAME> -l <LOCATION> Generates a terraform format HCL file for storage.tf and providers.tf . This is a great generator for quickly creating a bunch of vulnerable cloud storage resources or studying the different security permission levels. It also builds an Azure Key Vault resources. Resources Created Azure Storage Account (1) Azure Containers (3) The containers have three different access levels (Blob, Container, Private) Azure Blobs (3). All three are uploaded to all three containers. Azure Shares (2) Two files are uploaded to the two shares Azure Key Vault Secrets (3) Private Keys (1) Certificates (1) Options Specify the resource group and name of resources with NAME and the Azure location wit LOCATION . -n <NAME> : Specify a resource group name and name for other resources (Default: purplecloud-sentinel) -l <LOCATION> : Specify a different location (Default: centralus)","title":"Azure Storage lab"},{"location":"tools/storage/#azure-storage-lab","text":"$ python3 storage.py -n <NAME> -l <LOCATION> Generates a terraform format HCL file for storage.tf and providers.tf . This is a great generator for quickly creating a bunch of vulnerable cloud storage resources or studying the different security permission levels. It also builds an Azure Key Vault resources.","title":"Azure Storage lab"},{"location":"tools/storage/#resources-created","text":"Azure Storage Account (1) Azure Containers (3) The containers have three different access levels (Blob, Container, Private) Azure Blobs (3). All three are uploaded to all three containers. Azure Shares (2) Two files are uploaded to the two shares Azure Key Vault Secrets (3) Private Keys (1) Certificates (1)","title":"Resources Created"},{"location":"tools/storage/#options","text":"Specify the resource group and name of resources with NAME and the Azure location wit LOCATION . -n <NAME> : Specify a resource group name and name for other resources (Default: purplecloud-sentinel) -l <LOCATION> : Specify a different location (Default: centralus)","title":"Options"}]}